snippet #!
	#!/bin/python

snippet pp
	from pprint import pprint as print

snippet pdb
	import ${1|ipdb,pudb,pdb|}; $1.${2|set_trace,post_mortem|}()

snippet logging
	logging.basicConfig(
		level=LEVEL,
		format=(
			''.join(["{levelname}@", GY, "{lineno}@", BD, "{filename}@", "{msg}"])
			.replace("@", f"{YL}:{ST}")),
		style='{'
	)

snippet debugpy
	import debugpy
	if not debugpy.is_client_connected():
		print('\n\tWAITING FOR DEBUGPY CLIENT\n')
		debugpy.listen(5678)
		debugpy.wait_for_client()
		debugpy.breakpoint()

snippet argparse
	import argparse

	CONFIG_FILE=""
	parser = argparse.ArgumentParser(
		formatter_class=argparse.RawDescriptionHelpFormatter,
		add_help=False,
	)
	parser.add_argument('-c', '--config', help=f"Path to the confilg file. Defaults to {CONFIG_FILE}")
	config, args = parser.parse_known_args()
	try:
		with open(config.config_file, 'r') as file:
		vars(config).update(${1:json.load(file)})
		err = None
	except OSError:
		err = f'Config file "{config.config_file}" does not exist'

	parser.add_argument('-h', '--help', action="help")
	parser.parse_args(args, config)

	if err:
		raise ValueError(err)

snippet try
	try:
		${1:${TM_SELECTED_TEXT:# ...}}
	except ${2:Exception} as ${3:e}:
		${4:# ...}

snippet pm
	try:
		$TM_SELECTED_TEXT
	except ${2:Exception} as ${3:e}:
		import ipdb; ipdb.${4|post_mortem,set_trace|}()

snippet ret
	:return: ${1:description}

snippet par
	:param ${1:name}: ${2:description}

snippet rai
	:raises ${1:name}: ${2:description}

snippet doc
	"""${1:Description}

	:param ${2:name}: ${3:description}
	:return: ${4:description}
	:raises ${5:Name}: ${6:description}
	"""

snippet def
	def ${1:Name}(self, ${2:Args}):
		"""${3:Description}

		:param ${4:name}: ${5:description}
		:return: ${6:description}
		:raises ${7:Name}: ${8:description}
		"""

snippet class
	class ${1:Name}:
		"""${2:Description}"""

		def __init__(self, ${3:args}):
			"""${4:Description}

			:param ${5:name}: ${6:description}
			:return: ${7:description}
			:raises ${8:Name}: ${9:description}
			"""

snippet bp
	$0breakpoint($1)

snippet open
	with open('${1:file.txt}', '${2|r,w,a,x,rb,wb,ab|}') as file:
		$0

#=============
#    Odoo
#=============
snippet bfield
	fields.Boolean(string="$0", default=False)

snippet cfield
	fields.Char(string="$0")

snippet ifield
	fields.Integer(string="$0")

snippet ffield
	fields.Float(string="$1", digits=dp.get_precision('$2'))

snippet mfield
	fields.Many2one('${1:Comodel name}', string="$2", ondelete='${3|set null,cascade,restrict,set default,no action|}')

snippet mmfield
	fields.Many2many('${1:Comodel name}', relation='${2:Table name (opt)}', string="${3:Field name}")

snippet ofield
	fields.One2many('${1:Comodel name}', '${2:Comodel's field}', string="${3:Field name}")

snippet env
	self.env['$0']

snippet cont
	self.env.context

snippet ser
	('${1:field}', '${2:operator}', ${3:val})

snippet oc_init
	# ${1:Desc}

	if(not object.${2:field}_rc):
		raise AbortExec

	result.update({
	})

snippet search
	search([('$1', '${2:=}', $3)])

snippet glob
	object.global_vars['$0']
